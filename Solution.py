# -*- coding: utf-8 -*-
"""Travel_Recommendation_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xDlYMtxDgfiSRqwr5X_75Mpmr7uDBsxa
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

from google.colab import files
Expanded_Destinations = files.upload()

Expanded_Destinations = pd.read_csv('Expanded_Destinations.csv')

expaneded_reviews = files.upload()

expanded_Reviews = pd.read_csv('Final_Updated_Expanded_Reviews.csv')

Users_history = files.upload()

Users_history = pd.read_csv('Final_Updated_Expanded_UserHistory.csv')

Expanded_users = files.upload()

Expanded_users = pd.read_csv('Final_Updated_Expanded_Users.csv')

Expanded_Destinations.head()

Expanded_Destinations[Expanded_Destinations.duplicated()]

expanded_Reviews.head()

Users_history.head()

Expanded_Destinations.shape

destintaion = pd.merge(Expanded_Destinations,expanded_Reviews,how = 'inner',on='DestinationID')
destintaion

Users_history

df_history = pd.merge(destintaion,Users_history,how = 'inner',on=['UserID'])

combine_table = pd.merge(df_history,Expanded_users,how = 'inner',on=['UserID'])

#combine_table = pd.merge(Expanded_Destinations,expanded_Reviews,how = 'inner',on='DestinationID')\
 # .merge(Users_history,how = 'inner',on=['DestinationID','UserID'])\
  #.merge(Expanded_users,how = 'inner',on=['UserID'])

combine_table

combine_table.isnull().sum()*100/combine_table.shape[0]

combine_table.drop(columns = ['HistoryID','VisitDate','ExperienceRating'],inplace = True)

combine_table.drop(columns = 'Name_y',inplace = True)

combine_table.rename(columns = {'Name_x':'Name'},inplace = True)

combine_table

combine_table['content'] =  combine_table['Type']  +" "+combine_table['BestTimeToVisit']  +" "+combine_table['Preferences']

combine_table['content'].isnull().sum()*100/combine_table.shape[0]

combine_table['content'] = combine_table['content'].fillna("")

combine_table['content']

tf_idf = TfidfVectorizer(stop_words='english')
tf_transform = tf_idf.fit_transform(combine_table['content'])
tf_transform.toarray()

similarity_ = cosine_similarity(tf_transform,tf_transform)
similarity_

Users_history.head(2)

Expanded_Destinations.head(2)

## Recommended Destination for the users where it haven't visited

## dataframes [Users_history,Expanded_Destinations,similarity_]

def recommendation_destination(UserID,Users_history,Expanded_Destinations,similarity_):

  user_visited_destinations = Users_history[Users_history['UserID'] == UserID]['DestinationID'].values

  similarity_user_visited = np.sum(similarity_[user_visited_destinations-1],axis = 0)

  arranged_idx = np.argsort(similarity_user_visited)[::-1]

  recommendation = []

  for idx in arranged_idx:
    if Expanded_Destinations.iloc[idx]['DestinationID'] not in user_visited_destinations:
      recommendation.append(Expanded_Destinations.iloc[idx][['DestinationID','Name','State','Type','Popularity','BestTimeToVisit']].to_dict())
    if len(recommendation)>=5:
      break
  return pd.DataFrame(recommendation)

recommendation_destination(3,Users_history,Expanded_Destinations,similarity_)

"""## Collaborative Filtering"""

## User_item_index

User_item_index  = Users_history.pivot(index = 'UserID',columns = 'DestinationID',values = 'ExperienceRating')
User_item_index.fillna(0,inplace = True)

User_item_simlarity = cosine_similarity(User_item_index)

def collaborative_filtering(UserID,User_item_index,Expanded_Destinations,User_item_simlarity):

  similar_users = User_item_simlarity[UserID-1]

  top_5 = np.argsort(similar_users)[::-1][1:6]

  mean_rating = User_item_index.iloc[top_5].mean(axis = 0)

  sorting_top_ratings = mean_rating.sort_values(ascending = False).head(5).index

  recommendations = Expanded_Destinations[Expanded_Destinations['DestinationID'].isin(sorting_top_ratings)][['DestinationID','Name','State','Type','Popularity','BestTimeToVisit']]

  return recommendations

collaborative_filtering(3,User_item_index,Expanded_Destinations,User_item_simlarity)

